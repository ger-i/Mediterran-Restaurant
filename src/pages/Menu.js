import React, { useMemo } from 'react';
import data from "../data"; 
import Card from "../components/Card"; 
import "./Menu.css";

// Men√º kateg√≥ri√°k konstans defin√≠ci√≥ja - k√∂nny≈± b≈ëv√≠thet≈ës√©g √©s karbantarthat√≥s√°g
const MENU_CATEGORIES = [
  { key: 'appetizer', title: 'El≈ë√©telek', emoji: 'ü•ó' },
  { key: 'main', title: 'F≈ë√©telek', emoji: 'üçΩÔ∏è' },
  { key: 'dessert', title: 'Desszertek', emoji: 'üç∞' }
];

// F≈ë Menu komponens defin√≠ci√≥ja
const Menu = () => {
  // Memoiz√°lt kategoriz√°l√°s - csak akkor sz√°mol√≥dik √∫jra, ha a data v√°ltozik
  // Performance optimaliz√°l√°s: elker√ºli a felesleges √∫jrasz√°mol√°sokat
  const categorizedMenu = useMemo(() => {
    return MENU_CATEGORIES.reduce((acc, category) => {
      // Minden kateg√≥ri√°hoz sz≈±rj√ºk az adatokat t√≠pus szerint
      acc[category.key] = data.filter(item => item.type === category.key);
      return acc;
    }, {});
  }, []);

  // Bels≈ë komponens egy men√º szekci√≥ megjelen√≠t√©s√©hez
  // Param√©terek: category (kateg√≥ria adatok), items (az adott kateg√≥ria √©telei)
  const MenuSection = ({ category, items }) => {
    // √úres kateg√≥ria kezel√©se - ha nincs √©tel az adott kateg√≥ri√°ban
    if (!items || items.length === 0) {
      return (
        <section className="menu-section" aria-labelledby={`${category.key}-heading`}>
          <h2 id={`${category.key}-heading`} className="menu-subtitle">
            <span className="category-emoji" aria-hidden="true">{category.emoji}</span>
            {category.title}
          </h2>
          <div className="empty-category">
            <p>Jelenleg nincs el√©rhet≈ë √©tel ebben a kateg√≥ri√°ban.</p>
          </div>
        </section>
      );
    }

    // Norm√°l kateg√≥ria megjelen√≠t√©se - ha vannak √©telek
    return (
      <section className="menu-section" aria-labelledby={`${category.key}-heading`}>
        {/* Kateg√≥ria c√≠me emoji-val */}
        <h2 id={`${category.key}-heading`} className="menu-subtitle">
          <span className="category-emoji" aria-hidden="true">{category.emoji}</span>
          {category.title}
        </h2>
        
        {/* √âtelek r√°csos elrendez√©sben */}
        <div className="menu-grid" role="list">
          {items.map((item) => (
            <div key={item.id || item.name} role="listitem">
              {/* Card komponens minden √©telhez */}
              <Card data={item} />
            </div>
          ))}
        </div>
      </section>
    );
  };

  // Hibakezel√©s - ha nincs adat vagy √ºres a data array
  if (!data || data.length === 0) {
    return (
      <div className="menu-container">
        <h1 className="menu-title">√âtlapunk</h1>
        <div className="error-message">
          <p>Sajn√°ljuk, jelenleg nem tudjuk bet√∂lteni az √©tlapot. K√©rj√ºk, pr√≥b√°lja √∫jra k√©s≈ëbb.</p>
        </div>
      </div>
    );
  }

  // F≈ë render - teljes √©tlap megjelen√≠t√©se
  return (
    <main className="menu-container">
      {/* √âtlap fejl√©c */}
      <header className="menu-header">
        <h1 className="menu-title">√âtlapunk</h1>
        <p className="menu-description">
          Fedezze fel mediterr√°n ihlet√©s≈± √©teleink v√°logat√°s√°t
        </p>
      </header>
      
      {/* √âtlap tartalom - minden kateg√≥ria megjelen√≠t√©se */}
      <div className="menu-content">
        {MENU_CATEGORIES.map((category) => (
          <MenuSection
            key={category.key}
            category={category}
            items={categorizedMenu[category.key]}
          />
        ))}
      </div>
    </main>
  );
};

export default Menu;
